- Class: meta
  Course: Tools for text analysis
  Lesson: 1. Text encoding
  Author: Carlota de Benito Moreno
  Type: Standard
  Organization: University of Zurich
  Version: 2.4.5

- Class: text
  Output: Hi there! Welcome to this lesson on text encoding. Hopefully you have already watched the short video (available at the website) about text encoding and you know now what we're talking about.

- Class: text
  Output: In this lesson we'll learn how to set and change the encoding of a .txt file downloaded from the internet. 

- Class: cmd_question
  Output: We'll be working with the tidyverse, so the first thing is to load it. Go on and do it!
  CorrectAnswer: library(tidyverse)
  AnswerTests: any_of_exprs("library(tidyverse)", "library('tidyverse')")
  Hint: Use the function library()

- Class: text
  Output: Next thing is loading the .txt file. We'll be using a list of word frequencies in Don Quixote, made available by the Real Academia Española (if you want to check the resources they make available, go to https://www.rae.es/ and check the Banco de datos section).

- Class: cmd_question
  Output: The text file is found in the URL http://corpus.rae.es/frecCORDE/quijote1.TXT We will have to pass it as an argument in a function so, for readability, assign it the name url.
  CorrectAnswer: url <- "http://corpus.rae.es/frecCORDE/quijote1.TXT"
  AnswerTests: omnitest(correctExpr = "url <- 'http://corpus.rae.es/frecCORDE/quijote1.TXT'")
  Hint: You're creating a character variable, don't forget the quotation marks!

- Class: cmd_question
  Output: Now we just have to read this URL into R, with the tidyverse function read_lines, that only requires the URL as its single argument. Do so now!
  CorrectAnswer: read_lines(url)
  AnswerTests: omnitest(correctExpr = "read_lines(url)")
  Hint: Pass the variable url as the single argument of read_lines()

- Class: text
  Output: Did you realise what happened? You read the file into R and the console printed it… But you did not save it!
  
- Class: cmd_question
  Output: So let's do that now - assign it the name quixote
  CorrectAnswer: quixote <- read_lines(url)
  AnswerTests: omnitest(correctExpr = "quixote <- read_lines(url)")
  Hint: Did you type everything in lower-case letters?

- Class: cmd_question
  Output: Now that it's saved, let's take a look at its content. We will use the function head(), which, by default, shows you the first 6 elements of an R object.
  CorrectAnswer: head(quixote)
  AnswerTests: omnitest(correctExpr = "head(quixote)")
  Hint: Pass the variable quixote as the single argument of head()

- Class: text
  Output: You can already see that there is something weird going on here. Element 3 is supposed to be the country where Don Quixote was written, but it doesn't say España there… The text is in a different encoding than what R was expecting.

- Class: text
  Output: Before addressing the encoding question, let's explore quixote a bit further. Turns out that the first 9 elements are a bit special, so right now you don't really know what most of the file looks like.
  
- Class: cmd_question
  Output: But we can tell head() to show more than the first 6 elements, by specifying how many elements in the second argument. Ask for the 15 first elements!
  CorrectAnswer: head(quixote, 15)
  AnswerTests: omnitest(correctExpr = "head(quixote, 15)")
  Hint: Pass 15 as the second argument of head.

- Class: text
  Output: So, as you can see, while the first 9 elements show information of the text, from the 10th element onwards you get a list of a word/punctuation mark and the number of times it appears in Don Quixote. And you can also see that every word with an accent mark in Spanish isn't read correctly. Let's fix that now.

- Class: cmd_question
  Output: The function Encoding() returns the encoding that R set for every element of a text. Pass quixote as its argument
  CorrectAnswer: Encoding(quixote)
  AnswerTests: omnitest(correctExpr = "Encoding(quixote)")
  Hint: Note that Encoding() starts with a capital E!

- Class: text
  Output: R gave you the results for the first 1000 elements (not bad). As you can see, there are two possible values, unknown and UTF-8.

- Class: text
  Output: unknown is what R says for ASCII characters, because these are the same both in Latin-1 and in UTF-8. Whenever there was a non-ASCII character, R used UTF-8 to read it… and failed, as we saw.

- Class: cmd_question
  Output: That is because our .txt file was encoded in Latin-1, but the function read_lines() assumes everything it reads is in UTF-8. We can change the encoding of quixote with the function str_conv(), which takes our vector as its first value and the encoding value ("latin1") as a second value. Try it now.
  CorrectAnswer: str_conv(quixote, 'latin1')
  AnswerTests: omnitest(correctExpr = "str_conv(quixote, 'latin1')")
  Hint: You need to use quotation marks for "latin1".

- Class: cmd_question
  Output: It worked! But you didn't save it. Update quixote.
  CorrectAnswer: quixote <- str_conv(quixote, "latin1")
  AnswerTests: omnitest(correctExpr = "quixote <- str_conv(quixote, 'latin1')")
  Hint: Save the code you just used to quixote.
  
- Class: cmd_question
  Output: Check its encoding now.
  CorrectAnswer: Encoding(quixote)
  AnswerTests: omnitest(correctExpr = "Encoding(quixote)")
  Hint: You also did this already!

- Class: text
  Output: As you can see, R has re-encoded our text to UTF-8. Nice.

- Class: text
  Output: Well done! Now you should be able to convert to UTF-8 almost any old text you find… Congratulations! If you want to explore more options of some of the functions we used in this lesson, I recommend you run ?Encoding and ?head. Have fun!

- Class: mult_question
  Output: By the way, do you know what kind of object is quixote?
  AnswerChoices: vector;data frame;list
  CorrectAnswer: vector
  AnswerTests: omnitest(correctVal= 'vector')
  Hint: 33 % chance!

- Class: cmd_question
  Output: Exactly, it's a vector. You can actually ask R to check that I'm saying the truth. Pass quixote as the single argument of is.vector().
  CorrectAnswer: is.vector(quixote)
  AnswerTests: omnitest(correctExpr = "is.vector(quixote)")
  Hint: No quotation marks.  

- Class: cmd_question
  Output: To check what kind of objects you're dealing with, you can use class(). Pass quixote as its single argument.
  CorrectAnswer: class(quixote)
  AnswerTests: omnitest(correctExpr = "class(quixote)")
  Hint: No quotation marks.  

- Class: text
  Output: You get the answer 'character', which means that it is a character vector. Time for a break, isn't it?
