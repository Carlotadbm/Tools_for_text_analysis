- Class: meta
  Course: Tools for text analysis
  Lesson: Accessing Twitter (streamR)
  Author: Carlota de Benito Moreno
  Type: Standard
  Organization: University of Zurich
  Version: 2.4.5
  
- Class: text
  Output: >
    Hi there! Welcome to this lesson about the R library `streamR`. We will also need the libraries
    `ROAuth` and `tidyverse` - I have loaded them for you. Remember that you can install a new 
    library with the function `install.packages("library_name")` and load it with the function 
    `library(library_name)`.
    
- Class: text
  Output: >
    I recommend that you work on an RStudio script. Go to File > New File > RScript and write your
    solutions on the script. (Remember that you have to run them - the shortcut is command + enter
    in Mac and control + enter in Windows.) That way you can save them for later. You can 
    write comments that help you document what you're doing: simply take notes after typing `#`.

- Class: text
  Output: >
    In order to download data from Twitter, you need to have created your own Twitter API (with access 
    to the Stream API, with "future" data). If you haven't done so yet, go to 
    https://developer.twitter.com/en/docs/getting-started and do it. You will need the following data
    (copy them in your script): the name of your app, your consumer key and your consumer secret.
    
- Class: cmd_question
  Output: > 
    Let's authenticate ourselves! Create a variable called `my_oauth` (use `<-`) and assign it the 
    result of running the function `OAuthFactory$new()`. Within the function you should add the following
    arguments: `consumerKey`, `consumerSecret` and assign to each one the data you noted down from your 
    own API (within quotation marks). Add also the following arguments requestURL="https://api.twitter.com/oauth/request_token", 
    accessURL="https://api.twitter.com/oauth/access_token", authURL="https://api.twitter.com/oauth/authorize".
    Separate them by commas.
  CorrectAnswer: my_oauth <- OAuthFactory$new(consumerKey="your_consumer_key", consumerSecret="your_consumer_secret", requestURL="https://api.twitter.com/oauth/request_token", accessURL="https://api.twitter.com/oauth/access_token", authURL="https://api.twitter.com/oauth/authorize")
  AnswerTests: expr_creates_var('my_oauth')
  Hint: >
    In order to create a variable you need to use `<-`. Every argument is separated by commas and 
    the value of each argument is 1) assigned by an equal sign and 2) within quotes. So your code 
    should read like this (filled in with your own data): my_oauth <- OAuthFactory$new(consumerKey="your_consumer_key", 
    consumerSecret="your_consumer_secret", requestURL="https://api.twitter.com/oauth/request_token",
    accessURL="https://api.twitter.com/oauth/access_token", authURL="https://api.twitter.com/oauth/authorize")
    
- Class: cmd_question
  Output: >
    Now we need to do the "handshake". Run the following piece of code (copy and paste it):
    `my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))`.
    You will be directed to a Twitter website, where you will be asked to authorize the API and, 
    afterwards, you will get a PIN code. Copy the code in the console and run it (by pressing enter).
    It might ask you to do it twiceâ€¦
  CorrectAnswer: my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
  AnswerTests: omnitest(correctExpr='my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))')
  Hint: Simply copy and paste the line I gave you.

- Class: cmd_question
  Output: >
    We're gonna save the authentication, so that we don't have to repeat it before every query. 
    Set your working directory. If you've forgotten how to do it: in RStudio, in the files tab that you have in the
    bottom right window, navigate through your computer to find the folder where you would like to
    save the file, click on "More" and then click on "Set as working directory". Look at the console -
    this run the setwd() function without requiring you to type a complicated path.
  CorrectAnswer: setwd("path")
  AnswerTests: expr_uses_func('setwd')
  Hint: >
    If you can't see the "More" button, your window might be too small, try making it bigger.
    
- Class: cmd_question
  Output: >
    In order to save it, we'll use the function `save()`. Its first argument is `my_oauth` (which is 
    the object you saved a few minutes ago). The second argument is called `file`. Assign it the name
    of the file where you'll save the authentication: "my_oauth.Rdata" (within quotation marks).
  CorrectAnswer: save(my_oauth, file = "my_oauth.Rdata")
  AnswerTests: omnitest(correctExpr='save(my_oauth, file = "my_oauth.Rdata")')
  Hint: The second argument reads `file = "my_oauth.Rdata"`. 
    
- Class: cmd_question
  Output: >
    Now you can always use this authentication by loading it with the function load(). The only
    argument it needs is the name of the file with the authentication data: "my_oauth.Rdata". 
    Try it now.
  CorrectAnswer: load("my_oauth.Rdata")
  AnswerTests: omnitest(correctExpr='load("my_oauth.Rdata")')
  Hint: Simply run `load("my_oauth.Rdata")`.

- Class: text
  Output: >
    Now that you're authenticated, (you should be seeing an object `token` in your global 
    environment), let's download some tweets!
    
- Class: text
  Output: >
    Please note that, if your queries don't work, that might be because your authentication didn't 
    work properly. Check the solutions of the previous questions to see what your code should look
    like.

- Class: cmd_question
  Output: >
    Let's look for geolocated tweets first. `streamR` requires to establish a coordinate box, that is, 
    a vector containing two latitudes and two longitudes. The order is left, bottom, right, up, or 
    in more geographically accurate terms, Eastern longitude, Southern latitude, Western longitude, 
    Northern latitude. Save the following coordinate box "-124.65, 22.80, -66.64, 49.53" as an 
    object called `coord`. It delimits most of the USA (without Alaska, Hawaii or Puerto Rico).
  CorrectAnswer: coord <- "-124.65, 22.80, -66.64, 49.53"
  AnswerTests: omnitest(correctExpr='coord <- "-124.65, 22.80, -66.64, 49.53"')
  Hint: Remember that you need to assign a name using the arrow `<-`.
  
- Class: cmd_question
  Output: >
    We'll now search for the tweets located within that coordinate box generated in the next 60 seconds. 
    We'll use the 
    function `filterStream()` for that. It's first argument is called `file.name` and its value
    is the name of the json file the query will generate: "usa.json" in our example. Its second 
    argument should be `locations`, whose value is our coordinate box (`coord`, with no quotation 
    marks). Its third argument is called `timeout` and it establishes for how many seconds the search
    should run. Set it to `60` (with no quotation marks). Last, add the argument `oauth` and set it 
    to `my_oauth` (again, no quotation marks needed). It might take some time.
  CorrectAnswer: filterStream(file.name = "usa.json", locations = coord, timeout = 60, oauth = my_oauth)
  AnswerTests: omnitest(correctExpr='filterStream(file.name = "usa.json", locations = coord, timeout = 60, oauth = my_oauth)')
  Hint: Did you write the arguments in the order I mentioned them?
  
- Class: text
  Output: >
    The librar `streamR` does not save the result of your queries as an R object, but as a .json
    file stored in your computer. We'll explore them later, let's do a a few more searches first.
    
- Class: cmd_question
  Output: >
    We'll now create a file called "english.json"" with the tweets generated in English in the 
    next 60 seconds within our coordinate box. We'll use the `filterStream()` again. 
    Adapt the value of `file.name`. After the argument `locations`,
    add an argument `language` and set it to "en" and keep the argument `timeout`, set to 60 (with no
    quotation marks). Keep the argument `oauth` as before, in the last position.
  CorrectAnswer: filterStream(file.name = "english.json", locations = coord, language = "en", timeout = 60, oauth = my_oauth)
  AnswerTests: omnitest(correctExpr='filterStream(file.name = "english.json", locations = coord, language = "en", timeout = 60, oauth = my_oauth)')
  Hint: Did you set argument `file.name` to "english.json"?
  
- Class: cmd_question
  Output: >
    Let's now create a file called "literally.json"" with the tweets generated in the next 60 seconds with the word "literally".
    We'll use the `filterStream()` again: the arguments we need are `file.name`, `track`, `timeout, and 
    `oauth`. The only one we haven't used yet is `track`, which takes the string we want to search 
    for: "literally" (with quotation marks). Try it out.
  CorrectAnswer: filterStream(file.name = "literally.json", track = "literally", timeout = 60, oauth = my_oauth)
  AnswerTests: omnitest(correctExpr='filterStream(file.name = "literally.json", track = "literally", timeout = 60, oauth = my_oauth)')
  Hint: Did you adapt the value of `file.name`?
  
- Class: cmd_question
  Output: >
    .json files are rather complex files but `streamR` allows us to convert them into dataframes
    quite easily, with the function `parseTweets()`. All it needs is the name of the .json files 
    you want to transform. Let's try it out with "english.json".
  CorrectAnswer: parseTweets("english.json")
  AnswerTests: omnitest(correctExpr='parseTweets("english.json")')
  Hint: You need quotation marks for the name of the file.
  
- Class: cmd_question
  Output: >
    Great, now that you've seen what it does, we can save it to an R object called `english`.
  CorrectAnswer: english <- parseTweets("english.json")
  AnswerTests: omnitest(correctExpr='english <- parseTweets("english.json")')
  Hint: Did you use the arrow `<-` to save it?
  
- Class: cmd_question
  Output: >
    Now we can deal with it as a normal dataframe. For instance, we can save it as a .csv file
    with the tidyverse function `write_delim()`. Its first argument is the name of the R object 
    (`english`, no quotations). The second argument is the name of the file, with the extension
    ("english.csv", with quotation marks). Last argument is called `delim` and it defines what 
    column delimiters uses the .csv file. We'll use tabs, so set it to "\t" (quotation marks are
    needed).
  CorrectAnswer: write_delim(english, "english.csv", delim = "\t")
  AnswerTests: omnitest(correctExpr='write_delim(english, "english.csv", delim = "\t")')
  Hint: Check your use of the quotation marks!
  
- Class: text
  Output: >
    Congratulations! You now know the basics of library `streamR`! Remember that you can explore how
    any function works by running it with a question mark before (and withput parentheses). For
    instance: ?filterStream. You can also google every library and you will get a quite comprehensive
    guide of every function. But now I think you've earned a break!
    
    
