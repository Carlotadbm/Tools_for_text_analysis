- Class: meta
  Course: Tools for text analysis
  Lesson: 14. Create your own functions
  Author: Carlota de Benito Moreno
  Type: Standard
  Organization: University of Zurich
  Version: 2.4.5

- Class: text
  Output: Hi there! Welcome to this new lesson, where we'll learn how to create our own functions.

- Class: text
  Output: So far we have been using functions from packages that other people created, for writing scripts for solving a given task.

- Class: text
  Output: Sometimes we prepare some code that we will need quite often, but applied to different objects. It then makes sense to create a function that we can run everytime we need it. This is advanced programming, but it's not as hard as it sounds (I hope!). It's crucial that you're using a script for this lesson!

- Class: text
  Output: "We'll be working with the raw .txt files of the Europarl corpus. They all share a similar structure: a `tag` is followed by a new line with its `content`. For our analysis we need to have tags in one column and content in another one, but this requires a bit of preprocessing, which is the same for every file."

- Class: cmd_question
  Output: Let's look at how this preprocessing looks like with an individual file now. Make sure that your working directory is the folder `Europarl_pt` that you downloaded from the website. Use `read_delim()` to read the file "ep-02-12-17.txt" using tabs as delimiters and setting the arguemtn `col_names` to "text". Call the new object `europarl_1`.
  CorrectAnswer: europarl_1 <- read_delim("ep-02-12-17.txt", delim = "\t", col_names = "text") 
  AnswerTests: any_of_exprs('europarl_1 <- read_delim("ep-02-12-17.txt", delim = "\t", col_names = "text")', 'europarl_1 <- read_delim("ep-02-12-17.txt", col_names = "text", delim = "\t")')
  Hint: The first argument of the function is the name of the file (with quotations). And remember that the name of the argument used to set delimiters is `delim`.
  
- Class: cmd_question
  Output: Now check it out to see how it looks like.
  CorrectAnswer: europarl_1
  AnswerTests: omnitest(correctExpr='europarl_1')
  Hint: Simply print its name.
  
- Class: text
  Output: "As you can see, we have a tibble with one single column called `text`. Every odd row (rows 1, 3, 5…) has a tag, while every even row has the content of such tag. And, luckyily, all tags start by the same character: '<'. We would like to rearrange `text` into two different columns: `tag` and `content`."

- Class: text
  Output: The function `spread()` can rearrange one column into several, but our tibble must look a bit differently before we can use it. We need 1) one column indicating whether a row has a tag or a piece of content and 2) an index column that indicates which tag goes together with which piece of content.

- Class: cmd_question
  Output: "Since tags start by '<' we can use a simple regular expression to create a new column called `type` where TRUE will mean that something is a tag and FALSE, that it is not. `str_detect()` embedded in a mutate can do that: remember that its first argument is the column it is applied to and its second one is the regex, which in this case is '^<'. Create it using a pipe."
  CorrectAnswer: europarl_1 %>% mutate(type = str_detect(text, "^<"))
  AnswerTests: omnitest(correctExpr='europarl_1 %>% mutate(type = str_detect(text, "^<"))')
  Hint: Are you using `mutate()`? Column `type` should equal to `str_detect(text, "^<")`.

- Class: cmd_question
  Output: "Now we would like to change the values of the `type` column, replacing TRUE by 'tag' and FALSE by 'content'. The function `ifelse()` allows us to do that. I think its easier to understand if you first see it in action: use `mutate()` to change `type` to the following piece of code `ifelse(type == TRUE, 'tag', 'content')`."
  CorrectAnswer: europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content"))
  AnswerTests: any_of_exprs('europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content"))', 'europarl_1 %>% mutate(type = str_detect(text, "^<")) %>% mutate(type = ifelse(type == TRUE, "tag", "content"))')
  Hint: The argument of your new `mutate()` is `type = ifelse(type == TRUE, "tag", "content")`. 

- Class: text
  Output: You can think of `ifelse()` as two conditional sentences that mean something like 'if FIRST ARGUMENT (logical expression that identifies some values in the tibble) is TRUE, change that value to SECOND ARGUMENT. Otherwise, change it to THIRD ARGUMENT'. That is, our code above means 'for every value in `type` that equals TRUE, replace that value by "tag", otherwise change it to "content"'. It is a bit hard to come to grips with this function, what once you do is very useful for this kind of multiple replacements.

- Class: text
  Output: Our tibble is looking quite OK right now. However, I should tell you there is a hidden problem in these files. Sometimes they have two consecutive tags (normally '<P>'). This seems to be a silly mistake analogous to typing two spaces. But, because we're relying on having a structure tag-content-tag-content to transform our tibble into a tidy data frame, this silly mistake has important effects. We need to get rid of them.

- Class: text
  Output: "That is, we want to filter out rows that are of the same type as the row they immediately follow. We did something similar when we calculated the chapters in Verne's book. There we used `lead()` to find the value that comes after another value in the same column. `lag()` does the exact opposite: it find the previous value. Just what we need." 

- Class: cmd_question
  Output: Adding `filter()` with a pipe to your previous code, find all rows that are identical (in type) to the previous one. Remember that `filter()` takes a logical vector and that the operator `==` detects equivalence. Because `lag()` is applied to all rows, even to the first one, which has no previous row, we have to add a default value to be detected when calculating such value. We want that value to be different from the first value we have, so it doesn't get removed… So add the argument `default = "content'` to `lag()`.
  CorrectAnswer: europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content")) %>% filter(type == lag(type, default = "content"))
  AnswerTests: any_of_exprs('europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content")) %>% filter(type == lag(type, default = "content"))', 'europarl_1 %>% mutate(type = str_detect(text, "^<")) %>% mutate(type = ifelse(type == TRUE, "tag", "content")) %>% filter(type == lag(type, default = "content"))')
  Hint: The logical expression you're looking for is `type == lag(type, default = "content")`.
  
- Class: cmd_question
  Output: As you can see, all these rows are instances of "<P>", which we can safely remove. To do that, you simply need to add `!` before the logical expression in your `filter()`, which negates the result (that is, instead of getting the repeated rows, you'll remove them).
  CorrectAnswer: europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content"))
  AnswerTests: any_of_exprs('europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content"))', 'europarl_1 %>% mutate(type = str_detect(text, "^<")) %>% mutate(type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content"))')
  Hint: Now the logical expression you're looking for is `!type == lag(type, default = "content")`.

- Class: text
  Output: You may have noticed that your tibble has an odd number of rows. That's because both the first and the last row are tags. The last one again has <P>, which means `new paragraph`. Because we can't be sure that all files in the corpus have this last line, we'll leave it there.

- Class: cmd_question
  Output: "Our tibble now follows the tag-content structure we were looking for. However, it is still not ready for `spread()`, because we still need an index that indicates which values go together. That is, we need a vector that looks like c(1, 1, 2, 2, 3, 3, …) that indicates that every two consecutive rows form a tag-content pair. We'll do that in two steps. First, we'll create an index that numbers every row. The function `seq_along()` will do that, use `text` as its single argument. Create the new column `index` using a pipe."
  CorrectAnswer: europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text))
  AnswerTests: any_of_exprs('europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text))', 'europarl_1 %>% mutate(type = str_detect(text, "^<")) %>% mutate(type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text))')
  Hint: You're creating a new column, did you use `mutate()`?

- Class: text
  Output: Now, how do we transform this sequence (1, 2, 3, 4, 5…) into the one we need (1, 1, 2, 2, 3, 3…)? With a simple mathematical trick. If we divide each number by 2 and then round up the results we get exactly what we need!

- Class: cmd_question
  Output: Modify `index` accordingly. The function `ceiling()` will round up your results, and it takes the mathematical operation as its argument, which is simply `index/2`.
  CorrectAnswer: europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text), index = ceiling(index / 2))
  AnswerTests: any_of_exprs('europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text), index = ceiling(index / 2))', 'europarl_1 %>% mutate(type = str_detect(text, "^<")) %>% mutate(type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text), index = ceiling(index / 2))', 'europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text)) %>% mutate(index = ceiling(index/2))', 'europarl_1 %>% mutate(type = str_detect(text, "^<")) %>% mutate(type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text)) %>% mutate(index = ceiling(index/2))')
  Hint: You're modifying a column, did you use `mutate()`?

- Class: cmd_question
  Output: We're ready for spreading our tibble! Besides its first argument, that you already have in your pipe, `spread()` needs the column with the values that should be new columns (`type`) and the column with the values to be spread (`text`). Add it to your pipe.
  CorrectAnswer: europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text), index = ceiling(index / 2)) %>% spread(type, text)
  AnswerTests: any_of_exprs('europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text), index = ceiling(index / 2)) %>% spread(type, text)', 'europarl_1 %>% mutate(type = str_detect(text, "^<")) %>% mutate(type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text), index = ceiling(index / 2)) %>% spread(type, text)', 'europarl_1 %>% mutate(type = str_detect(text, "^<"), type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text)) %>% mutate(index = ceiling(index/2)) %>% spread(type, text)', 'europarl_1 %>% mutate(type = str_detect(text, "^<")) %>% mutate(type = ifelse(type == TRUE, "tag", "content")) %>% filter(!type == lag(type, default = "content")) %>% mutate(index = seq_along(text)) %>% mutate(index = ceiling(index/2)) %>% spread(type, text)')
  Hint: You simply have to add `spread(type, text)`.

- Class: text
  Output: Well, that was quite a lot of thinking and hard work and chances are you would need to do that a few times more if you want to work with the Europarl corpus. Which is why it makes sense to create your own function that can do this in a simple line of code.

- Class: text
  Output: "I know that sounds like a hard thing to do, but thanks to our pipe syntax it actually isn't. A function is defined by using this kind of pattern: `function_name <- function(argument1, argument2,…){}`. Let's explain it step by step. Copy it to your script."
  
- Class: text
  Output: "First thing is the name of your function. You can normally choose the name you want, but today I'm choosing for you: `read_europarl`. Replace it in your code."

- Class: text
  Output: That name is assigned to an object of type `function`, which makes sense.
  
- Class: text
  Output: "Within the parentheses of `function()` you will define the names of your arguments. If you look at the code we wrote to clean the file, there's only one information we need to produce our tibble: the name of the file. So the only argument that our function needs will be called `file` (again, the name is your choice - not now -, but it is good that is a name that makes sense). Replace the content of the parentheses with `file`."
  
- Class: text
  Output: "As you can see, now you have two characters that we have never used to program: `{}`. Within those you define the content of your function. Press enter with the cursor between the braces: RStudio already gives you an empty line where you can type that content."
  
- Class: text
  Output: "Paste your code from above in that new line. You should have two different pieces of code: the one where you read the file, saving it to europarl_1, and the whole pipe where you cleaned europarl_1."

- Class: text
  Output: We need some minimal adaptations to have the function ready. Because we want our function to read the file, not to save it to an object, the first line must simply have the `read_delim()` part of the instruction, without the assigned name and the assignment operator. So remove that now.

- Class: text
  Output: Now it makes sense that our pipe starts in that first instruction, since `europarl_1` doesn't exist anymore. Fix that.

- Class: text
  Output: You should now have a single chunk of code, linked by pipes, that will perform all the steps that we did before. The only thing you need to do now is replace the name of the file by `file` (without quotation marks!! It's an argument, not a string.). By doing that you're creating a coreferential relationship between the `file` you wrote in the parentheses in `function` and the object that your function should read and clean. Every object in you pipe is created within the pipe except for file, which you will need to add as the single argument of `read_europarl()`.
  
- Class: script
  Output: Let's see if you got everything right. Copy the code in the script that just opened up. When you're done, save it and type submit().
  AnswerTests: test_read_europarl()
  Hint: "Those were a lot of steps you just did: giving a name to the function, specify `file` as its argument (with no quotation marks!) and adapt the code inside the curly braces… Check it again in case you missed something."
  Script: function.R

- Class: text
  Output: Notice that a new function appeared in your environment (there was one already there, that's the one I had to create to check that your answer was correct).

- Class: cmd_question
  Output: Now it's time for you to see that all this effort really paid off. Run `read_europarl()`, using "ep-02-12-17.txt" as its single argument.
  CorrectAnswer: read_europarl("ep-02-12-17.txt")
  AnswerTests: omnitest(correctExpr='read_europarl("ep-02-12-17.txt")')
  Hint: The name of the file is the argument (with quotations!), the function is `read_europarl()`.
 
- Class: text
  Output: Well, I hope you agree that that is amazing. You just created an R function! Wow. I get excited everytime. And by using some of our previous knowledge we can very easily read the five Europarl files that we have in our working directory.
 
- Class: cmd_question
  Output: First, create the vector `files` with the files in the working directory, which you can recover by running `dir_ls()`.
  CorrectAnswer: files <- dir_ls()
  AnswerTests: omnitest(correctExpr='files <- dir_ls()')
  Hint: You need to assign the name `files` with the assignment operator `<-` to `dir_ls()`.

- Class: cmd_question
  Output: "And now let's use map_dfr() to read all of them. You might remember that it creates a new dataframe with the dataframes that are created by the function you're mapping, binding them by row. It needs two arguments: the vector with the files (`files`) and the function (`read_europarl`, without parentheses!). We'll add a third one, `.id = 'source'`, in order to have a `source` column with the name of each file."
  CorrectAnswer: map_dfr(files, read_europarl, .id = "source")
  AnswerTests: omnitest(correctExpr='map_dfr(files, read_europarl, .id = "source")')
  Hint: Note that it must read `read_europarl` and not `read_europarl()` and that `.id` has a dot before its name.

- Class: text
  Output: "Tadah! You now have a function you can easily use to read the whole Europarl corpus with a few lines of code. I think that is super cool, especially because you can create any function you want! Of course, those functions are not permanently saved onto R: you'll need to run the script everytime you need them. Our function depends on the tidyverse, so you should write that on the script where you save the function too. (Another option would be creating a package with the function, but that's maybe too much right now.)"

- Class: cmd_question
  Output: Let's save the result of your last piece of code to `europarl_pt`.
  CorrectAnswer: europarl_pt <- map_dfr(files, read_europarl, .id = "source")
  AnswerTests: omnitest(correctExpr='europarl_pt <- map_dfr(files, read_europarl, .id = "source")')
  Hint: Simply assing `europarl_pt` to the `map_dfr()` line you had before.

- Class: cmd_question
  Output: And let's write it to a .csv file called "europarl_pt_5files.csv" with write_delim(). Set `delim` to "\t".
  CorrectAnswer: write_delim(europarl_pt, "europarl_pt_5files.csv", delim = "\t")
  AnswerTests: omnitest(correctExpr='write_delim(europarl_pt, "europarl_pt_5files.csv", delim = "\t")')
  Hint: "The function `write_delim()` takes three arguments: the object you're writing (`europarl_pt`), the name of the file ('europarl_pt_5files.csv') and `delim = '\t'."

- Class: text
  Output: "You just learnt how to do something quite advanced, so it's normal that you're bit overwhelmed right now. In the next lesson we'll do something easier: looking at collocations in these 5 texts. You're doing great!"
  
- Class: mult_question
  Output: Would you like to submit the log of this lesson to Google Forms so that I can use your progress as feedback on where I should improve in my swirl courses? Whatever you say, this will open a Google Form - if you don't want that I see your progress, do not send it!
  AnswerChoices: Yes;No
  CorrectAnswer: NULL
  AnswerTests: submit_log()
  Hint: As you feel!
