- Class: meta
  Course: Tools for text analysis
  Lesson: Accessing Twitter (rtweet)
  Author: Carlota de Benito Moreno
  Type: Standard
  Organization: University of Zurich
  Version: 2.4.5

- Class: text
  Output: >
    Hi there! Welcome to this lesson about the R library `rtweet`. I have loaded the library for you. Remember that you can install a new 
    library with the function `install.packages("library_name")` and load it with the function 
    `library(library_name)`.
  
- Class: text
  Output: >
    I recommend that you work on an RStudio script. Go to File > New File > RScript and write your
    solutions on the script. (Remember that you have to run them - the shortcut is command + enter
    in Mac and control + enter in Windows.) That way you can save them for later. You can 
    write comments that help you document what you're doing: simply take notes after typing `#`.

- Class: text
  Output: >
    In order to download data from Twitter, you need to have created your own Twitter API (with access 
    to the Search API, with historical data). If you haven't done so yet, go to 
    https://developer.twitter.com/en/docs/getting-started and do it. You will need the following data
    (copy them in your script): the name of your app, your consumer key, your consumer secret, 
    your access token and your access secret.

- Class: cmd_question
  Output: > 
    Let's authenticate ourselves! Create a variable called `token` (use `<-`) and assign it the 
    result of running the function `create_token()`. Within the function you should add the following
    arguments: `app`, `consumer_key`, consumer_secret`, `access_token` and `access_secret`. Separate them
    by commas and assign to each one the data you noted down from your own API. These data must be
    introduced within quotation marks.
  CorrectAnswer: token <- create_token(app = "name_of_user_created_Twitter_application", consumer_key = "your_consumer_key", consumer_secret = "your_consumer_secret", access_token = "your_access_token", access_secret = "your_access_secret")
  AnswerTests: expr_uses_func('create_token')
  Hint: >
    In order to create a variable you need to use `<-`. Every argument is separated by commas and 
    the value of each argument is 1) assigned by an equal sign and 2) within quotes. So your code 
    should read like this (filled in with your own data): token <- create_token(app = "name_of_user_created_Twitter_application",
    consumer_key = "your_consumer_key", consumer_secret = "your_consumer_secret", access_token = "your_access_token",
    access_secret = "your_access_secret")

- Class: text
  Output: >
    Now that you're authenticated, (you should be seeing an object `token` in your global 
    environment), let's download some tweets!
    
- Class: text
  Output: >
    Please note that, if your queries don't work, that might be because your authentication didn't 
    work properly. Check the solutions of the previous question to see what your code should look
    like.

- Class: cmd_question
  Output: >
    Let's look for a maximum of 100 tweets with the word "youthquake". Use the function `search_tweets()`
    and add the following arguments: 1) `q`, which contains the query - set it to "youthquake". Don't
    forget the quotation marks! 2) `n`, which contains the number of tweets, set it to 100 (no quotation 
    marks here!) And 3) `include_rts` - we don't want retweets, so set it to FALSE (with no quotation marks -
    do not forget to write it in all caps).
  CorrectAnswer: search_tweets(q = "youthquake", n = 100, include_rts = FALSE)
  AnswerTests: omnitest(correctExpr='search_tweets(q = "youthquake", n = 100, include_rts = FALSE)')
  Hint: Did you separate all arguments by commas?
  
- Class: cmd_question
  Output: >
    Now that we know that it works, let's save the query into an object called `youthquake`.
  CorrectAnswer: youthquake <- search_tweets(q = "youthquake", n = 100, include_rts = FALSE)
  AnswerTests: omnitest(correctExpr='youthquake <- search_tweets(q = "youthquake", n = 100, include_rts = FALSE)')
  Hint: >
    Objects are created by assigning it a name with the arrow `<-`. Remember that in RStudio
    you can type the arrow by typing command + - (Mac) or control + - (Windows)
  
- Class: cmd_question
  Output: >
    Let's look at our new object! Type it's name.
  CorrectAnswer: youthquake
  AnswerTests: omnitest(correctExpr='youthquake')
  Hint: >
    Simply type (and run) `youthquake`.
    
- Class: text
  Output: >
    Now that you've gotten the hang of it, let's run and save other queries at the same time. 
  
- Class: cmd_question
  Output: >
    Let's look for a maximum of 1000 tweets (but no retweets) with the word sequence "because reasons". 
    Use again the function `search_tweets(). You'll need to adapt your code above by updating the value of `n`.
    But, most importantly, you'll need to embed the sequence "because reason" (with the double 
    quotation marks) within single quotation marks: '"because reasons"'. This tells the function 
    to look for the literal sequence, instead of the words "because" and "reason" separately.
    Save the result to an object called `because`.
  CorrectAnswer: because <- search_tweets(q = '"because reasons"', n = 1000, include_rts = FALSE)
  AnswerTests: omnitest(correctExpr="because <- search_tweets(q = '\"because reasons\"', n = 1000, include_rts = FALSE)")
  Hint: Adapt your code from above and don't forget to save it!
    
- Class: cmd_question
  Output: >
    Let's check the result in a new window. Use the function View(). It's single argument
    is the name of the object you want to inspect - `because`.
  CorrectAnswer: View(because)
  AnswerTests: omnitest(correctExpr='View(because)')
  Hint: >
    Note that `View` starts by an upper case V. No quotation marks needed for introducing `because`.
    
- Class: cmd_question
  Output: >
    Let's now look for a maximum of 1000 tweets (but no retweets) with one of the following words: 
    "latino", "latina", "latinx". Use again the function `search_tweets(). This time you only need 
    (a single pair of) double quotation marks for your query, but you need to separte each word
    by spaces and the word OR. Save the result to an object called `latinx`.
  CorrectAnswer: latinx <- search_tweets(q = "latino OR latina OR latinx", n = 1000, include_rts = FALSE)
  AnswerTests: omnitest(correctExpr='latinx <- search_tweets(q = "latino OR latina OR latinx", n = 1000, include_rts = FALSE)')
  Hint: >
    Adapt your code from above and don't forget to save it! Your `q` argument should look like this: 
    q = "latino OR latina OR latinx".

- Class: cmd_question
  Output: >
    Let's look at our new object! Type it's name.
  CorrectAnswer: latinx
  AnswerTests: omnitest(correctExpr='latinx')
  Hint: >
    Simply type (and run) `latinx`.
    
- Class: cmd_question
  Output: >
    Let's now look for a maximum of 1000 popular tweets in English with the word "latino". Adapta
    the `q`argument and drop 
    the `include_rts` argument and add both the argument `lang` (set it to "en", so that you only
    get tweets classified as English) and the argument `type` (set it to "popular", so that you
    only get popular tweets). Although this is not crucial, please write the arguments in the 
    following order: `q`, `n`, `lang` and `type` (swirl will detect an error otherwise).
    Save the result to an object called `latino`.
  CorrectAnswer: latino <- search_tweets(q = "latino", n = 1000, lang="en", type="popular") 
  AnswerTests: omnitest(correctExpr='latino <- search_tweets(q = "latino", n = 1000, lang="en", type="popular")')
  Hint: >
    Adapt your code from above and don't forget to save it! Did you write the arguments in the order I told you to?
    
- Class: cmd_question
  Output: >
    Let's look at our new object! Type it's name.
  CorrectAnswer: latino
  AnswerTests: omnitest(correctExpr='latino')
  Hint: >
    Simply type (and run) `latino`.

- Class: cmd_question
  Output: >
    Let's now look for a maximum of 18000 mixed tweets with the word "food" that were 
    geolocated at 50km from Philadelphia. You will need to add a `geocode` argument, set to 
    the value "39.97,-75.17,50km" (with quotation marks) and set `type` to "mixed".
    Please write the arguments in the following order: `q`, `n`, `geocode` and `type` 
    (swirl will detect an error otherwise). Save the result to an object called `food`. Don't
    forget to update `q` and `n`.
  CorrectAnswer: food <- search_tweets(q = "food", n = 18000, geocode = "39.97,-75.17,50km", type="mixed") 
  AnswerTests: omnitest(correctExpr='food <- search_tweets(q = "food", n = 18000, geocode = "39.97,-75.17,50km", type="mixed")')
  Hint: >
    Adapt your code from above and don't forget to save it! Did you write the arguments in the order I told you to?
    
- Class: cmd_question
  Output: >
    Let's look at our new object! Type it's name.
  CorrectAnswer: food
  AnswerTests: omnitest(correctExpr='food')
  Hint: >
    Simply type (and run) `food`.
    
    
- Class: cmd_question
  Output: >
    Let's now download tweets based on the user. For that we'll need a new function: `get_timeline()`.
    Its first argument is `user` - set it to "POTUS" (with quotation marks). Add a second argument 
    `n` and set it to 200 (without quotation marks) to look for the last 200 tweets of the President of
    the United States of America. Save the result to an object called `potus`.
  CorrectAnswer: potus <- get_timeline(user = "POTUS", n = 200)
  AnswerTests: omnitest(correctExpr='potus <- get_timeline(user = "POTUS", n = 200)')
  Hint: >
    Did you use the function `get_timeline()`? Don't forget to save it!
    
- Class: cmd_question
  Output: >
    Let's look at our new object! Type it's name.
  CorrectAnswer: potus
  AnswerTests: omnitest(correctExpr='potus')
  Hint: >
    Simply type (and run) `potus`.
    
    
- Class: cmd_question
  Output: >
    We can also download tweets of several users. For that, all we need is to create a vector 
    with the names of the different users and pass it as the value of the `user` argument. 
    We create a vector with the function c(), which contains each string with the name of the 
    user within its own quotation marks and separated by commas. Let's add the user FLOTUS to
    our last search! Save the result to an object called `potus_flotus`.
  CorrectAnswer: potus_flotus <- get_timeline(user = c("POTUS", "FLOTUS"), n = 200)
  AnswerTests: omnitest(correctExpr='potus_flotus <- get_timeline(user = c("POTUS", "FLOTUS"), n = 200)')
  Hint: >
    The new value of `user` should read `c("POTUS", "FLOTUS")`.
    
- Class: cmd_question
  Output: >
    Let's look at our new object! Type it's name.
  CorrectAnswer: potus_flotus
  AnswerTests: omnitest(correctExpr='potus_flotus')
  Hint: >
    Simply type (and run) `potus_flotus`.
    
- Class: cmd_question
  Output: >
    You've learnt how to perform some of the most frequent searches now. Most likely, you would 
    like to save the result of your queries in a spreadsheet. Before saving it, it's important
    that you know were you're going to save it. In RStudio, in the files tab that you have in the
    bottom right window, navigate through your computer to find the folder where you would like to
    save the file, click on "More" and then click on "Set as working directory". Look at the console -
    this run the setwd() function without requiring you to type a complicated path.
  CorrectAnswer: setwd("path")
  AnswerTests: expr_uses_func('setwd')
  Hint: >
    If you can't see the "More" button, your window might be too small, try making it bigger.
    
    
- Class: cmd_question
  Output: >
    To write the table to a csv file we'll use the rtweet function `write_as_csv()`. 
    Its first argument is the name of the object you want to save (no
    quotation marks) and its second argument is the name of the file you want to write (with quotation
    marks and extension). Write the object 
    `food` into a file called "food.csv".
  CorrectAnswer: write_as_csv(food, "food.csv")
  AnswerTests: omnitest(correctExpr='write_as_csv(food, "food.csv")')
  Hint: >
    Check your use of the quotation marks, did you follow the instructions?
    
- Class: text
  Output: >
    Congratulations! You can now perform a large number of queries using the rtweet library, 
    I think you've earned a break!
