- Class: meta
  Course: Tools for text analysis
  Lesson: Accessing Tumblr
  Author: Carlota de Benito Moreno
  Type: Standard
  Organization: University of Zurich
  Version: 2.4.5

- Class: text
  Output: >
    Hi there! Welcome to this lesson about the R library `tumblr`. We'll also need libraries `httr`
    and `tidyverse`. I have loaded them for you. Remember that you can install a new 
    library with the function `install.packages("library_name")` and load it with the function 
    `library(library_name)`.
  
- Class: text
  Output: >
    I recommend that you work on an RStudio script. Go to File > New File > RScript and write your
    solutions on the script. (Remember that you have to run them - the shortcut is command + enter
    in Mac and control + enter in Windows.) That way you can save them for later. You can 
    write comments that help you document what you're doing: simply take notes after typing `#`.

- Class: text
  Output: >
    In order to download data from Tumblr, you need to have created your own Tumblr API.
    If you haven't done so yet, go to https://www.tumblr.com/oauth/apps. 
    You will need the following data (copy them on your script): the name of your app, your consumer key, 
    your consumer secret, your token, your token secret and you api key.

- Class: cmd_question
  Output: > 
    Let's authenticate ourselves! Create a variable called `app` (use `<-`) and assign it the 
    result of running the function `oauth_app()`. Within the function you should add the following
    arguments: `appname`, `key`, secret`. Separate them by commas and assign to each one the data 
    you noted down from your own API (name of the app, consumer key and consumer secret). 
    These data must be introduced within quotation marks.
  CorrectAnswer: app <- oauth_app(appname = "your_appname", key = "your_consumer_key", secret = "your_consumer_secret")	
  AnswerTests: expr_uses_func('oauth_app')
  Hint: >
    In order to create a variable you need to use `<-`. Every argument is separated by commas and 
    the value of each argument is 1) assigned by an equal sign and 2) within quotes. So your code 
    should read like this (filled in with your own data): app <- oauth_app(appname = "your_appname", key = "your_consumer_key", secret = "your_consumer_secret")	

- Class: cmd_question
  Output: >
    Now create a variable called `endpoint` (use `<-`) and assign it the 
    result of running the function `oauth_endpoint()`. Within the function you should add the following
    arguments: 1) `request` (with the value "http://www.tumblr.com/oauth/request_token"), 
    2) `authorize` (with the value "http://www.tumblr.com/oauth/authorize") and 
    3) `access` (with the value "http://www.tumblr.com/oauth/access_token"). 
    These data must be introduced within quotation marks.
  CorrectAnswer: endpoint <- oauth_endpoint(request = "http://www.tumblr.com/oauth/request_token", authorize = "http://www.tumblr.com/oauth/authorize", access = "http://www.tumblr.com/oauth/access_token")
  AnswerTests: omnitest(correctExpr='endpoint <- oauth_endpoint(request = "http://www.tumblr.com/oauth/request_token", authorize = "http://www.tumblr.com/oauth/authorize", access = "http://www.tumblr.com/oauth/access_token")')
  Hint: Did you separate all arguments by commas?

- Class: cmd_question
  Output: > 
    After running the next line  you will be asked if you want to use a local file: 
    the easiest is to say no - for that you'll need to type 2 in the console and run it by pressing enter. 
    But, before that, create a variable called `sig` (use `<-`) and assign it the 
    result of running the function `sign_oauth1.0()`. Its first argument is the `app` object we just created
    (no quotation marks needed).
    You'll also need the arguments `token` and `token_secret`. Assign to each one the data 
    you noted down from your own API. These data must be introduced within quotation marks.
  CorrectAnswer: sig <- sign_oauth1.0(app, token = "your_token", token_secret = "your_token_secret")
  AnswerTests: expr_uses_func('sign_oauth1.0')
  Hint: >
    Your code should read like this (filled in with your own data): 
    sig <- sign_oauth1.0(app, token = "your_token", token_secret = "your_token_secret")

- Class: cmd_question
  Output: >
    We're almost done with the authentication now. Save your api key as a an object called 
    `api_key`. The api key must be within quotation marks.
  CorrectAnswer: api_key <- "your_api_key"
  AnswerTests: expr_creates_var('api_key')
  Hint: >
    Did you use `<-`? Your code should read like this (filled in with your own data): 
    api_key <- "your_api_key"

- Class: text
  Output: >
    Please note that, if your queries don't work, that might be because your authentication didn't 
    work properly. Check the solutions of the previous questions to see what your code should look
    like. 
    
- Class: cmd_question
  Output: >
    Let's download the last few text posts from the tumblr "didyouknowblog.com/". Use the 
    function `posts()` and add the following arguments: 1) `base_hostname`, which contains the 
    url to the specific tumblr (within quotation marks); 2) `type`, which should be set to 
    "text" (within quotation marks), and 3) `api_key`, whose value is the object `api_key` (so
    no quotation marks are needed). Try it out.
  CorrectAnswer: posts(base_hostname = "didyouknowblog.com/", type = "text", api_key = api_key)
  AnswerTests: omnitest(correctExpr='posts(base_hostname = "didyouknowblog.com/", type = "text", api_key = api_key)')
  Hint: The value you should assign to `base_hostname` is "didyouknowblog.com/".

- Class: cmd_question
  Output: >
    The object you got is a list. List are rather complicated R objects, but we'll deal with them.
    Let's save it first, call it `text_posts`.
  CorrectAnswer: text_posts <- posts(base_hostname = "didyouknowblog.com/", type = "text", api_key = api_key)
  AnswerTests: omnitest(correctExpr='text_posts <- posts(base_hostname = "didyouknowblog.com/", type = "text", api_key = api_key)')
  Hint: Simply assign the name to the previous line of code.

- Class: cmd_question
  Output: >
    This function downloads a maximum of 20 posts. But you can decide which ones to download
    by adding the argument `offset` and assigning it a post number. Try it out, with the line 
    of code you have tried already, but without saving it. Set `offset` to 21 (with no quotation
    marks). Add it as the last argument so that swirl recognises correctly.
  CorrectAnswer: posts(base_hostname = "didyouknowblog.com/", type = "text", api_key = api_key, offset = 21)
  AnswerTests: omnitest(correctExpr='posts(base_hostname = "didyouknowblog.com/", type = "text", api_key = api_key, offset = 21)')
  Hint: Don't save the result!

- Class: cmd_question
  Output: >
    Tumblr has posts of different categories. Let's download the last few photo posts from 
    the same tumblr ("didyouknowblog.com/"). You simply need to adapt the code you've used already.
    Set the `type` argument to "photo" and drop the `offset` argument. Save it to an object called
    `photo_posts`.
  CorrectAnswer: photo_posts <- posts(base_hostname = "didyouknowblog.com/", type = "photo", api_key = api_key)
  AnswerTests: omnitest(correctExpr='photo_posts <- posts(base_hostname = "didyouknowblog.com/", type = "photo", api_key = api_key)')
  Hint: Did you save it?

- Class: cmd_question
  Output: >
    The objects we've created have a rather complicated structure. We're going to deal with them using
    the tidyverse. If you're not used to working with pipes, you might find it a bit complicated, but I'm sure
    you can follow. First thing is to transform our object into a tibble (a dataframe). But we only
    want to deal with the element `response` of the lists we created. For that, we'll use the operator 
    `$`. Type `text_posts$response` followed by a pipe (`%>%`) and add the function `as_tibble()`
    after the pipe, parentheses included, but empty.
  CorrectAnswer: text_posts$response %>% as_tibble()
  AnswerTests: omnitest(correctExpr='text_posts$response %>% as_tibble()')
  Hint: You don't need any kind of quotation marks.
  
- Class: cmd_question
  Output: >
    Now we will select the column `posts`, which is the one with the information we need. Add 
    another pipe (`%>%`) to your code above (after `as_tibble()`) and, afterwards, add the function
    `select()`. This time it should not be empty - its argument must be the column we want to select:
    `posts`.
  CorrectAnswer: text_posts$response %>% as_tibble() %>% select(posts)
  AnswerTests: omnitest(correctExpr='text_posts$response %>% as_tibble() %>% select(posts)')
  Hint: You don't need any kind of quotation marks.
  
- Class: cmd_question
  Output: >
    Because `posts` is also a list, we need to unnest it. Add a new pipe add the end of your 
    code above (`%>%`) and add the function `unnest_auto()` after it. Again, its argument is the 
    column we want to unnest - `posts`.
  CorrectAnswer: text_posts$response %>% as_tibble() %>% select(posts) %>% unnest_auto(posts)
  AnswerTests: omnitest(correctExpr='text_posts$response %>% as_tibble() %>% select(posts) %>% unnest_auto(posts)')
  Hint: You don't need any kind of quotation marks.
  
- Class: cmd_question
  Output: >
    Last, let's simplify our dataframe a little bit. We'll select the columns `id`, `date`, 
    `body` and `summary` (where most of the text is). Add another pipe (`%>%`) at the end of 
    your code above and, afterwards, add the function `select()`. Its for arguments, separated
    by commas, are the four columns I just listed (in that order).
  CorrectAnswer: text_posts$response %>% as_tibble() %>% select(posts) %>% unnest_auto(posts) %>% select(id, date, body, summary)
  AnswerTests: omnitest(correctExpr='text_posts$response %>% as_tibble() %>% select(posts) %>% unnest_auto(posts) %>% select(id, date, body, summary)')
  Hint: You don't need any kind of quotation marks.

- Class: cmd_question
  Output: >
    Now we need to save it! Assign it the name `text_posts_df` - you'll need to write it at the
    beginning of the line of code above.
  CorrectAnswer: text_posts_df <- text_posts$response %>% as_tibble() %>% select(posts) %>% unnest_auto(posts) %>% select(id, date, body, summary)
  AnswerTests: omnitest(correctExpr='text_posts_df <- text_posts$response %>% as_tibble() %>% select(posts) %>% unnest_auto(posts) %>% select(id, date, body, summary)')
  Hint: Did you use `<-`?

- Class: cmd_question
  Output: >
    Let's do the same with `photo_posts$response`. Copy and paste the code you just run. It only 
    needs to adaptations: 1) call it `photo_posts_df` instead of `text_posts_df` and 2) instead 
    of `text_posts$response`, write `photo_posts$response`.
  CorrectAnswer: photo_posts_df <- photo_posts$response %>% as_tibble() %>% select(posts) %>% unnest_auto(posts) %>% select(id, date, body, summary)
  AnswerTests: omnitest(correctExpr='photo_posts_df <- photo_posts$response %>% as_tibble() %>% select(posts) %>% unnest_auto(posts) %>% select(id, date, body, summary)')
  Hint: Did you make the two necessary adaptations?
  
- Class: cmd_question
  Output: >
    We can paste both dataframes into a single one, with the function `add_row`. Its two single 
    arguments are the names of our two dataframes: `photo_posts_df` and `text_posts_df` (write them
    in this order, please). Save the result as `corpus_tumblr`.
  CorrectAnswer: corpus_tumblr <-  add_row(photo_posts_df, text_posts_df) 
  AnswerTests: omnitest(correctExpr='corpus_tumblr <-  add_row(photo_posts_df, text_posts_df) ')
  Hint: You don't need any kind of quotation marks.
  
- Class: cmd_question
  Output: >
    We're going to write it as a .csv file, so we'll set our working directory first. 
    Remember that you can do that very easily in RStudio: go to the files tab that you have in the
    bottom right window, navigate through your computer to find the folder where you would like to
    save the file, click on "More" and then click on "Set as working directory". Look at the console -
    this run the setwd() function without requiring you to type a complicated path.
  CorrectAnswer: setwd("path")
  AnswerTests: expr_uses_func('setwd')
  Hint: >
    If you can't see the "More" button, your window might be too small, try making it bigger.
    
    
- Class: cmd_question
  Output: >
    To write the table to a csv file we'll use the tidyverse function `write_delim()`. 
    Its first argument is the name of the object you want to save (no
    quotation marks). Its second argument is the name of the file you want to write (with quotation
    marks and extension). Its last argument is `delim`, which we'll set as tabs ("\t", within 
    quotation marks). Write the object `corpus_tumblr` into a file called "corpus_tumblr.csv".
  CorrectAnswer: write_delim(corpus_tumblr, "corpus_tumblr.csv", delim = "\t")
  AnswerTests: omnitest(correctExpr='write_delim(corpus_tumblr, "corpus_tumblr.csv", delim = "\t")')
  Hint: >
    Check your use of the quotation marks, did you follow the instructions?
    
- Class: text
  Output: >
    Working with Tumblr might require that you familiarise yourself with data transformation. I
    recommend you to use the tidyverse. I have a (rather long) swirl course for that that you're
    welcome to try out. The information is on the readme file of the Github repository that you'll find 
    here: https://github.com/Carlotadbm/Tools_for_text_analysis. So far it is work in progress, so
    don't hesitate to contact me if you have any questions or detect that you need some extra material :)
    every piece of feedback is welcome!

- Class: text
  Output: >
    Right now, though… I think it's time for a well deserved break!
