- Class: meta
  Course: Tools for text analysis
  Lesson: 3. Cleaning text data II
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.5

- Class: text
  Output: Hi there! In this session we will again deal with some frequency data provided by the Real Academia Española, but we'll use a new approach to download it and we'll practice our mutating skills. I have loaded the tidyverse for you already. Have fun!
  
- Class: cmd_question
  Output: The txt file containing the 5000 most frequent words in the CREA Spanish corpus is found in the following url "http://corpus.rae.es/frec/5000_formas.TXT". Save it under the name crea.
  CorrectAnswer: crea <- "http://corpus.rae.es/frec/5000_formas.TXT"
  AnswerTests: omnitest(correctExpr='crea <- "http://corpus.rae.es/frec/5000_formas.TXT"')
  Hint: Remember that you save objects by assigning them a name
  
- Class: cmd_question
  Output: Let's read first it using the read_lines() function, don't save it yet. Because you don't want to load 1000 lines, add the argument n_max = 10, so that it only reads the first 10 lines.
  CorrectAnswer: read_lines(crea, n_max = 10)
  AnswerTests: omnitest(correctExpr='read_lines(crea, n_max = 10)')
  Hint: The first argument of read_lines is the path to your txt file is, that is, the url you just stored!
  
- Class: mult_question
  Output: As you can see, this time it seems that the data is already tabulated. But can you spot why this file is not tidy?
  AnswerChoices: It is missing a column name;Delimiters are not tabs;There are a lot of extra spaces
  CorrectAnswer: It is missing a column name
  AnswerTests: omnitest(correctVal= 'It is missing a column name')
  Hint: Some of these are annoying, but not untidy per se…

- Class: text
  Output: So the Real Academia Española uploaded a nice .txt file except for all the extra spaces and that it forgot to name the second column. This is a problem, since most R functions recognise the number of columns of a tabulated object by looking at the first row. But we're gonna get around this. At least delimiters are tabs!
  
- Class: cmd_question
  Output: We'll read crea now with the function read_delim() and save it to crea_table. We'll need the argument delim (which, as you saw, are tabs, that is, "\t"). Because the first row has basically a problem, we'll skip it. For that, add the argument "skip = 1". Last, we'll specify col_names, since we just removed them. The argument col_names takes a character vector. Name your columns order, word, abs_freq and rel_freq.
  CorrectAnswer: crea_table <- read_delim(crea, delim = "\t", skip = 1, col_names = c("order", "word", "abs_freq", "rel_freq"))
  AnswerTests: omnitest(correctExpr='crea_table <- read_delim(crea, delim = "\t", skip = 1, col_names = c("order", "word", "abs_freq", "rel_freq"))')
  Hint: Recall that named arguments identify their values by means of =. Also recall that elements of a character vector need quotation marks!
  
- Class: cmd_question
  Output: As with the quixote file, this file is encoded in latin1, which is why R is not reading all elements properly, as you saw with tail(). We'll fix this now. As you might remember, the function for that is str_conv(). But we have to pass a specific column as its only argument. We have to use it within mutate(), where you assign the column word to the str_conv function with its arguments. Save the result as crea_table.
  CorrectAnswer: crea_table <- mutate(crea_table, word = str_conv(word, "latin1"))
  AnswerTests: omnitest(correctExpr='crea_table <- mutate(crea_table, word = str_conv(word, "latin1"))')
  Hint: Recall that str_conv takes the vector (the column in this case) as its first argument and "latin1" as the second. And that you need to use = to update the word column.

- Class: cmd_question
  Output: Did this work? Run tail() on crea_table and check the 10 last elements.
  CorrectAnswer: tail(crea_table, 10)
  AnswerTests: omnitest(correctExpr='tail(crea_table, 10)')
  Hint: 10 last elements!

- Class: text
  Output: Very good! But, as you can see, we have extra spaces in every single column. We will get rid of them with a combination of mutate() and the function trimws() (ws here means 'white spaces', so it's quite clear what this function does!).

- Class: cmd_question
  Output: trimws() takes your column as its single argument. Embed it within mutate, and trim the white spaces of the order column. Save it to crea_table
  CorrectAnswer: crea_table <- mutate(crea_table, order = trimws(order))
  AnswerTests: omnitest(correctExpr='crea_table <- mutate(crea_table, order = trimws(order))')
  Hint: The second argument of mutate should be word = trimws(order)
  
- Class: text
  Output: We could now repeat these three times more to clean every column. But programming is all about not typing many times the same thing. The function across() will help us clean our other columns.

- Class: cmd_question
  Output: So across() takes as its first argument the columns you want to apply a given function. In this case its columns 2 to 4, so you can write 2:4. Its second argument is the function you want to use, which is trimws, with no parentheses. Across is always embedded within a mutate.
  CorrectAnswer: crea_table <- mutate(crea_table, across(2:4, trimws))
  AnswerTests: omnitest(correctExpr='crea_table <- mutate(crea_table, across(2:4, trimws))')
  Hint: You don't need to use the equal sign as in other cases of mutate. Across updates the columns you're dealing with.
  
- Class: cmd_question
  Output: Let's see how these changes played out. Run head() on crea_table.
  CorrectAnswer: head(crea_table)
  AnswerTests: omnitest(correctExpr='head(crea_table)')
  Hint: You know this!

- Class: text
  Output: Very good! Note that column abs_freq has commas for thousands separator. We do not want that! We will get rid of them with a combination of mutate() and the function str_replace_all().

- Class: cmd_question
  Output:  str_replace_all() takes your column as its first argument; the character you want to replace as its second argument (","), and the character you want to replace it with as its third argument (in this case, nothing ""). Embed it within mutate and update crea_table
  CorrectAnswer: crea_table <- mutate(crea_table, abs_freq = str_replace_all(abs_freq, ",", ""))
  AnswerTests: omnitest(correctExpr='crea_table <- mutate(crea_table, abs_freq = str_replace_all(abs_freq, ",", ""))')
  Hint: The second argument of mutate should be abs_freq = str_replace_all(abs_freq, ",", "")

- Class: cmd_question
  Output: Let's check if it worked. Run head() on crea_table
  CorrectAnswer: head(crea_table)
  AnswerTests: omnitest(correctExpr='head(crea_table)')
  Hint: You know this!

- Class: cmd_question
  Output: It's time to transform columns order and abs_freq to integer and rel_freq to numeric. We can use as.integer and as.numeric within mutate. You'll be glad to know that we can actually pass several arguments to mutate, so we can do all this transformations in a single piece of code. And yes, we could've done that also earlier, but I thought it'd be too much… Sorry about that! If you're writing in a script, you can press enter after the comma that separates every argument of mutate, so that it will be easier to read. Don't forget to save everything as crea_table.
  CorrectAnswer: crea_table <- mutate(crea_table, order = as.integer(order), abs_freq = as.integer(abs_freq), rel_freq = as.numeric(rel_freq))
  AnswerTests: omnitest(correctExpr='crea_table <- mutate(crea_table, order = as.integer(order), abs_freq = as.integer(abs_freq), rel_freq = as.numeric(rel_freq))')
  Hint: Are all your parentheses in the right place? The whole expression should end with two parentheses…

- Class: cmd_question
  Output: Let's check these new changes. Run head() on crea_table.
  CorrectAnswer: head(crea_table)
  AnswerTests: omnitest(correctExpr='head(crea_table)')
  Hint: You are bored of doing this already, so you might have mistyped something.
  
- Class: cmd_question
  Output: It looks like values in rel_freq got rounded up/down, but actually that's not what happened. It's just a representation thing. That is, R gave you only five digits, because it has a default limit. But you can ask it to give you more! Run head() again, but this time, pass crea_table$rel_freq as its first argument and add a second argument that reads digits = 8.
  CorrectAnswer: head(crea_table$rel_freq, digits = 8)
  AnswerTests: omnitest(correctExpr='head(crea_table$rel_freq, digits = 8)')
  Hint: Remember that you're asking for a single column, not the whole tibble now.

- Class: text
  Output: See? So there they were! 

- Class: text
  Output: I know this whole process was a bit tedious, but I hope that you now understand quite well how mutate() works. It's a crucial function, since it allows us to modify and create columns with tidyverse syntax. 

- Class: text
  Output: In this session we followed a number of steps applied to the same object. There is a very useful operator in the tidyverse that can help us do this in a mucho more efficient way. It is called the pipe and it looks like this - %>%. Let's try it out.

- Class: text
  Output: When using a pipe, you use the object you're dealing with before the pipe. After the pipe, you put your code. The only difference with what you know how to do is that you don't write your first argument, because that's what the pipe is saying. The pipe tells the function "Hey, function, this object before me is your first argument!".

- Class: cmd_question
  Output: Above we read our data using the following code, read_delim(crea, delim = "\t", skip = 1, col_names = c("order", "word", "abs_freq", "rel_freq")). Try to transform it into a pipe. The object you're manipulating is `crea`.
  CorrectAnswer: crea %>% read_delim(delim = "\t", skip = 1, col_names = c("order", "word", "abs_freq", "rel_freq"))
  AnswerTests: omnitest(correctExpr='crea %>% read_delim(delim = "\t", skip = 1, col_names = c("order", "word", "abs_freq", "rel_freq"))')
  Hint: The object `crea` should appear before the pipe %>%

- Class: cmd_question
  Output: So here's where the magic happens! You can add a pipe at the end of the last code and add your next step, which was mutate(crea_table, word = str_conv(word, "latin1")). Add it with a pipe now. Remember to remove the first argument!
  CorrectAnswer: crea %>% read_delim(delim = "\t", skip = 1, col_names = c("order", "word", "abs_freq", "rel_freq")) %>% mutate(crea_table, word = str_conv(word, "latin1"))
  AnswerTests: omnitest(correctExpr='crea %>% read_delim(delim = "\t", skip = 1, col_names = c("order", "word", "abs_freq", "rel_freq")) %>% mutate(crea_table, word = str_conv(word, "latin1"))')
  Hint: You need to remove `crea_table` (and the comma, of course).

- Class: cmd_question
  Output: You can save a sequence of pipes exactly as before, writing the name of the new object followed by an arrow, at the beginning of the chunk of code. Save it as crea_table_2.
  CorrectAnswer: crea_table_2 <- crea%>% read_delim(delim = "\t", skip = 1, col_names = c("order", "word", "abs_freq", "rel_freq")) %>% mutate(crea_table, word = str_conv(word, "latin1"))
  AnswerTests: omnitest(correctExpr='crea_table_2 <- crea %>% read_delim(delim = "\t", skip = 1, col_names = c("order", "word", "abs_freq", "rel_freq")) %>% mutate(crea_table, word = str_conv(word, "latin1"))')
  Hint: You've done this before!

- Class: text
  Output: Tip! After each pipe you can press enter. This way, your code will look very easy to read.

- Class: text
  Output: You now deserve a break, but whenever you feel like going back to R, check the video at the website about pipes and try to do the redo this code by using them. Your code will start looking very elegant soon enough!
  

