- Class: meta
  Course: Tools for text analysis
  Lesson: 7. Histograms and boxplots in ggplot2
  Author: Carlota de Benito Moreno
  Type: Standard
  Organization: University of Zurich
  Version: 2.4.5

- Class: text
  Output: Hi there! Welcome to this lesson on boxplots and histograms in ggplot2. If you are not sure what a boxplot or a histogram is, please go watch the video on Data visualization first (you'll find it in OLAT).
  
- Class: cmd_question
  Output: Last lesson we identified the chapters each paragraph in Verne's novel belonged to. I have loaded that tibble for you, is called verne_text. Print it so that you can remember how it looks like.
  CorrectAnswer: verne_text
  AnswerTests: omnitest(correctExpr='verne_text')
  Hint: Just run the tibble's name, no other function needed.

- Class: text
  Output: You might have noticed that I also loaded the tidyverse for you. We'll be learning how to use a specific package from the tidyverse, ggplot2. ggplot2 syntax is a bit different from what you're used to, so if you haven't still watched the video on Data visualization because you already know about histograms and boxplots, please watch it to get a short intro on ggplot2 syntax.
  
- Class: text
  Output: "Our goal in this lesson is to visualize the number of paragraphs per chapter in Verne's novel in two different ways: a histogram and a boxplot. We'll start with the histogram. Could you draw in a piece of paper what do you think the plot should look like (what each axes mean, etc.)?"
  
- Class: cmd_question
  Output: Let's first calculate how many paragraph are there in every chapter. We have the count() function for that, which we've already used. Go ahead (and use a pipe).
  CorrectAnswer: verne_text %>% count(chapter)
  AnswerTests: omnitest(correctExpr='verne_text %>% count(chapter)')
  Hint: The second argument of count() is the column whose values you want to count (first argument in a pipe).

- Class: cmd_question
  Output: Since that's what we were looking for, let's save it as verne_count_chapters.
  CorrectAnswer: verne_count_chapters <- verne_text %>% count(chapter)
  AnswerTests: omnitest(correctExpr='verne_count_chapters <- verne_text %>% count(chapter)')
  Hint: Did you assign the name verne_count_chapters to the last code you typed?
  
- Class: text
  Output: Now, I really recommend you use a script for the code that follows (it'd be good to have the one you typed above in the script too). In your script you can press enter after every pipe, which makes your code much readable. In ggplot syntax we'll be adding new functions using `+` and in you script you can also type enter afterwards. It will be much easier to read, trust me. If you're unsure about how to write a script while using swirl, I recorded a very short video about that, you'll find it in OLAT (in the videos in session 3).

- Class: cmd_question
  Output: "That's the tibble that we need for our graph, that is, the first argument of the function ggplot() (perfect for a pipe). The second argument is another function: aes(), where we should indicate the variables that go into our plot. Only one is needed for a histogram: the one you want to count. Go ahead."
  CorrectAnswer: verne_count_chapters %>% ggplot(aes(n))
  AnswerTests: omnitest(correctExpr='verne_count_chapters %>% ggplot(aes(n))')
  Hint: Did you use a pipe? The variable you want to count is column n!
  
- Class: text
  Output: Nothing happened yet, because we've only created the setup for a graph. We now need to add it a layer or geom. 

- Class: cmd_question
  Output: In order to create a histogram, we need to add geom_histogram() to the code above. We do that after a `+` that should follow our code above. Recall that you can press enter after the `+`sign if you're typing in a script. You'll avoid long lines, that are hard to read. Try it out. 
  CorrectAnswer: verne_count_chapters %>% ggplot(aes(n)) + geom_histogram()
  AnswerTests: omnitest(correctExpr='verne_count_chapters %>% ggplot(aes(n)) + geom_histogram()')
  Hint: Simply add "+ geom_histogram()" after your ggplot function.
   
- Class: text
  Output: Now you got a plot and a warning. We didn't set a binwidth so by default we got a histogram with 30 bins (and we don't know how many elements there are in those bins).
  
- Class: cmd_question
  Output: But we can check that. Add an argument `binwidth = 1` to geom_histogram() and see what happens.
  CorrectAnswer: verne_count_chapters %>% ggplot(aes(n)) + geom_histogram(binwidth = 1)
  AnswerTests: omnitest(correctExpr='verne_count_chapters %>% ggplot(aes(n)) + geom_histogram(binwidth = 1)')
  Hint: Simply add "+ geom_histogram(binwidth = 1)" after your ggplot function.

- Class: text
  Output: That looks a bit ugly… In this histogram, every bar indicates a single value (27 paragraphs, 100 paragraphs, etc.). We don't need that level of detail.

- Class: cmd_question
  Output: Try it with a bindwidth of 5 now. It seems reasonable to have groups that include chapters within a range of 5 paragraphs.
  CorrectAnswer: verne_count_chapters %>% ggplot(aes(n)) + geom_histogram(binwidth = 5)
  AnswerTests: omnitest(correctExpr='verne_count_chapters %>% ggplot(aes(n)) + geom_histogram(binwidth = 5)')
  Hint: Same code as above, but 5 instead of 1.

- Class: text
  Output: Ok, this looks more adequate now. Maybe you want to experiment a bit with the binwidth. If you type play(), swirl will stop evaluating your code, until you type nxt() and resume the lesson.

- Class: text
  Output: Now it's time to make our histogram prettier and better. First, it's crucial that you have proper titles and explanatory labels in your plot, so that it can be easily interpreted.

- Class: cmd_question
  Output: "We do that by adding the function labs(), again after a `+` sign! We want the following title: 'Paragraphs per chapter in Verne (80 jours)', the following label for the x-axis: 'Number of paragraphs', and the following label for the y-axis: 'Number of chapters'. You need to use the arguments title, x and y respectively."
  CorrectAnswer: verne_count_chapters %>% ggplot(aes(n)) + geom_histogram(binwidth = 5) + labs(title = "Paragraphs per chapter in Verne (80 jours)", x = "Number of paragraphs", y = "Number of chapters")
  AnswerTests: omnitest(correctExpr='verne_count_chapters %>% ggplot(aes(n)) + geom_histogram(binwidth = 5) + labs(title = "Paragraphs per chapter in Verne (80 jours)", x = "Number of paragraphs", y = "Number of chapters")')
  Hint: The three arguments of labs() should be separated from their values with the `=` sign.
  
- Class: text
  Output: We could use theme() to change the labels in the axes, but they seem alright… But there are a couple of theme_ functions that we can use to change the style of our plot.

- Class: cmd_question
  Output: For instance, try adding (again with a `+`) the function theme_bw() and compare it with your previous plot.
  CorrectAnswer: verne_count_chapters %>% ggplot(aes(n)) + geom_histogram(binwidth = 5) + labs(title = "Paragraphs per chapter in Verne (80 jours)", x = "Number of paragraphs", y = "Number of chapters") + theme_bw
  AnswerTests: omnitest(correctExpr='verne_count_chapters %>% ggplot(aes(n)) + geom_histogram(binwidth = 5) + labs(title = "Paragraphs per chapter in Verne (80 jours)", x = "Number of paragraphs", y = "Number of chapters") + theme_bw')
  Hint: No arguments needed inside theme_bw()

- Class: text
  Output: It's probably not hard to guess now that "bw" stands for black and white… There are other themes you can explore (check the ggplot2 cheatsheet in OLAT!).

- Class: cmd_question
  Output: Moreover, your histogram must not be grey! It could be any colour  you want. But for logistic reasons, we will go now with colour I want… ;) Within the geom_histogram() function add an argument fill that takes "darkgreen" as its value (quotations needed!).
  CorrectAnswer: verne_count_chapters %>% ggplot(aes(n)) + geom_histogram(binwidth = 5, fill = "darkgreen") + labs(title = "Paragraphs per chapter in Verne (80 jours)", x = "Number of paragraphs", y = "Number of chapters") + theme_bw
  AnswerTests: any_of_exprs('verne_count_chapters %>% ggplot(aes(n)) + geom_histogram(binwidth = 5, fill = "darkgreen") + labs(title = "Paragraphs per chapter in Verne (80 jours)", x = "Number of paragraphs", y = "Number of chapters") + theme_bw', 'verne_count_chapters %>% ggplot(aes(n)) + geom_histogram(fill = "darkgreen", binwidth = 5) + labs(title = "Paragraphs per chapter in Verne (80 jours)", x = "Number of paragraphs", y = "Number of chapters") + theme_bw')
  Hint: Recall that arguments are separated from their values by the `=` sign.
  
- Class: text
  Output: If you're just anything like me, you probably want to try now all colour names you know. I absolutely support that you follow your heart, so type play() to play around without being watched by swirl. When you're done with all the colours you can imagine (maybe I shouldn't tell you this, but in the Cheatsheets folder in OLAT you'll find a pdf with the looooongest list of colours and their names in R), simply type nxt() and resume the lesson.
  
- Class: text
  Output: I hope you have a beautiful histogram now. But maybe you're struggling with its interpretation… Let's see.
  
- Class: mult_question
  Output: How many chapters have around 75 paragraphs in Verne's novel?
  AnswerChoices: 3;2;4
  CorrectAnswer: 3
  AnswerTests: omnitest(correctVal= '3')
  Hint: 
  
- Class: mult_question
  Output: There are five chapters that have around…
  AnswerChoices: 50 paragraphs;35 paragraphs;90 paragraphs
  CorrectAnswer: 50 paragraphs
  AnswerTests: omnitest(correctVal= '50 paragraphs')
  Hint: 
  
- Class: text
  Output: Do you recall the summary statistics we reviewed last lesson? Look at the histogram and try to make an educated guess about what the minimum, maximum, median and mean values in our  data.
  
- Class: cmd_question
  Output: Let's see how close your guess was! Use summary() to check the actual summary statistics.
  CorrectAnswer: summary(verne_count_chapters$n)
  AnswerTests: omnitest(correctExpr='summary(verne_count_chapters$n)')
  Hint: summary() is a base R function, so you need to use the `$` notation.
  
- Class: text
  Output: The histogram gives you a whole picture of your frequency distribution, but then you only get a feeling about the summary statistics. The boxplot, however, gives you an exact visual summary of many of those statistics. Let's create one now.

- Class: cmd_question
  Output: Let's try first by using our code above, simply replacing geom_histogram() (and everything it had inside) by geom_boxplot(). Keep everything else.
  CorrectAnswer: verne_count_chapter %>% ggplot(aes(n)) +  geom_boxplot() +  labs(title = "Paragraphs per chapter in Verne (80 jours)", x = "Number of paragraphs", y = "Number of chapters") + theme_bw()
  AnswerTests: omnitest(correctExpr='verne_count_chapter %>% ggplot(aes(n)) +  geom_boxplot() +  labs(title = "Paragraphs per chapter in Verne (80 jours)", x = "Number of paragraphs", y = "Number of chapters") + theme_bw()')
  Hint: Keep your pipe, keep your ggplot() function and keep your labs() and theme_bw() functions. But note that geom_boxplot() must be where geom_histogram was, after ggplot().

- Class: text
  Output: Well, we got ourselves a boxplot, but it's more common to see them the other way around, that is, with our values in the y axis.

- Class: cmd_question
  Output: But if we don't specify anything when we include a variable in aes(), geom_boxplot() assumes you want it in the x-axis. Change your code to `aes(y = n)`.
  CorrectAnswer: verne_count_chapter %>% ggplot(aes(y = n)) +  geom_boxplot() +  labs(title = "Paragraphs per chapter in Verne (80 jours)", x = "Number of paragraphs", y = "Number of chapters") + theme_bw()
  AnswerTests: omnitest(correctExpr='verne_count_chapter %>% ggplot(aes(y = n)) +  geom_boxplot() +  labs(title = "Paragraphs per chapter in Verne (80 jours)", x = "Number of paragraphs", y = "Number of chapters") + theme_bw()')
  Hint: Recall that aes() is embedded in ggplot().

- Class: text
  Output: Now it looks better. I actually recommend that you always specify your aes() arguments. In the histogram we could've simply written `aes(x = n)` for clarity.

- Class: cmd_question
  Output: Because we changed the orientation of the plot, our axes labels are also the other way around. Actually, I don't think the x-axis is very meaningful, so let's fix this. Give the y-axis its correct title and don't give any title to the x-axis.
  CorrectAnswer: verne_count_chapter %>% ggplot(aes(y = n)) +  geom_boxplot() +  labs(title = "Paragraphs per chapter in Verne (80 jours)", y = "Number of paragraphs") + theme_bw()
  AnswerTests: omnitest(correctExpr='verne_count_chapter %>% ggplot(aes(y = n)) +  geom_boxplot() +  labs(title = "Paragraphs per chapter in Verne (80 jours)", y = "Number of paragraphs"") + theme_bw()')
  Hint: In labs() you should have no x argument anymore and y should read "Number of paragraphs".

- Class: cmd_question
  Output: "Now, because the text in the x-axis is rather meaningless, we can remove it. And for that we need theme(). Add it as your last function (again add it by using `+`) and introduce two arguments: `axis.text.x` (for the text) and  `axis.ticks.x` (for the ticks…). The values for both of them should be the same: the function element_blank(), that indicates that… this element should be blank. The names were chosen well! Because it is a function, you shouldn't use quotations."
  CorrectAnswer: verne_count_chapter %>% ggplot(aes(y = n)) +  geom_boxplot() +  labs(title = "Paragraphs per chapter in Verne (80 jours)", y = "Number of paragraphs") + theme_bw() + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
  AnswerTests: omnitest(correctExpr='verne_count_chapter %>% ggplot(aes(y = n)) +  geom_boxplot() +  labs(title = "Paragraphs per chapter in Verne (80 jours)", y = "Number of paragraphs") + theme_bw() + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())')
  Hint: "You should've added this after theme_bw(): `+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())`"

- Class: cmd_question
  Output: Can you give your boxplot a nice colour, like, I don't know, "tomato"?
  CorrectAnswer: verne_count_chapter %>% ggplot(aes(y = n)) +  geom_boxplot(fill = "tomato") +  labs(title = "Paragraphs per chapter in Verne (80 jours)", y = "Number of paragraphs") + theme_bw() + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
  AnswerTests: omnitest(correctExpr='verne_count_chapter %>% ggplot(aes(y = n)) +  geom_boxplot() +  labs(title = "Paragraphs per chapter in Verne (80 jours)", y = "Number of paragraphs") + theme_bw() + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())')
  Hint: The argument that specifies the colour is `fill` and should  be inside the function geom_boxplot().

- Class: text
  Output: "Choosing tomato was just an excuse to call your attention to the fact that, if you're planning to use colours meaningfully in your plots, the combination of green and red shades is a nightmare for most colourblinds. Fun fact: about 8% of the male population is colourblind! Most other colour combinations make their lifes easier :)"
  
- Class: mult_question
  Output: Let's see how well you're interpreting this boxplot. What are the 1st and 3rd quartiles (approximately)?
  AnswerChoices: 40-75;15-100;50-100
  CorrectAnswer: 40-75
  AnswerTests: omnitest(correctVal= '40-75')
  Hint: 
  
- Class: mult_question
  Output: And the minimum and maximum (approximately)?
  AnswerChoices: 15-100;40-75;50-100
  CorrectAnswer: 15-100
  AnswerTests: omnitest(correctVal= '15-100')
  Hint: 
 
- Class: text
  Output: The limits of the box indicate the 1st and 3rd quartile, while the end of the whiskers indicate the minimum and maximum (there are no outliers in this sample). The thick horizontal line around 52 is the median.

- Class: cmd_question
  Output: In this lesson's video we talked about the standard deviation, that tells us how compact is our data. You can easily calculate it in R with the function sd(). Try it out.
  CorrectAnswer: sd(verne_count_chapter$n)
  AnswerTests: omnitest(correctExpr='sd(verne_count_chapter$n)')
  Hint: sd() is a base R function, so you need to use the `$` notation.
  
- Class: text
  Output: That is, on average, chapters differ in about 22 paragraphas from the mean. Good to know.
  
- Class: text
  Output: You proficiently created two different plots using ggplot2, congratulations! Although it might look complicated at the beginning, ggplot2 is extremely powerful (you can do about anything you want) and, moreover, most of the time you only need to adapt a little bit the code you used for another plot, which is quite convenient. In the next lesson we'll explore ggplot2 a bit more.
  
  

  
